apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'java-library'
apply plugin: 'maven-publish'

group = 'com.coderask.server'
version = version + '-' + getBuildNumber()

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}


test {
    useJUnitPlatform()
}

dependencies {
    compile 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.springframework.boot:spring-boot-starter-json'
    implementation 'org.springframework.boot:spring-boot-autoconfigure'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

bootJar {
    enabled = false
}

jar {
    enabled = true
}


// maven publish
configurations {
    [apiElements, runtimeElements].each {
        it.outgoing.artifacts.removeIf { it.buildDependencies.getDependencies(null).contains(jar) }
        it.outgoing.artifact(bootJar)
    }
}
publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = "http://maven.pkg.github.com/lize3420/my-server"
            credentials {
                username = System.getenv("GITHUB_ACTOR") ?: "lize3420"
                password = System.getenv("GITHUB_TOKEN") ?: "password"
            }
        }
    }

    publications {
        maven(MavenPublication) {
            groupId = group
            artifactId = artifactId
            version = version

            from components.java
        }
    }
}

def getBuildNumber(){
    return System.getenv("GITHUB_RUN_NUMBER") ?: '1'
}
